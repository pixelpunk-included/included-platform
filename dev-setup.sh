#!/bin/bash

# Script para desenvolvimento facilitado
# Detecta automaticamente novas depend√™ncias e configura o ambiente

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir com cores
print_status() {
    local color=$1
    local icon=$2
    local message=$3
    echo -e "${color}${icon} ${message}${NC}"
}

# Fun√ß√£o para mostrar banner
show_banner() {
    echo -e "${CYAN}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    INCLUDED PLATFORM                        ‚ïë"
    echo "‚ïë              Desenvolvimento Automatizado                   ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

# Fun√ß√£o para verificar se o Docker est√° rodando
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        print_status $RED "‚ùå" "Docker n√£o est√° rodando. Por favor, inicie o Docker primeiro."
        exit 1
    fi
}

# Fun√ß√£o para verificar se o Stripe CLI est√° instalado
check_stripe_cli() {
    if ! command -v stripe &> /dev/null; then
        return 1
    fi
    return 0
}

# Fun√ß√£o para instalar Stripe CLI
install_stripe_cli() {
    print_status $BLUE "üîß" "Instalando Stripe CLI..."

    # Detectar sistema operacional
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        if command -v brew &> /dev/null; then
            brew install stripe/stripe-cli/stripe
        else
            print_status $YELLOW "‚ö†Ô∏è" "Homebrew n√£o encontrado. Instalando via curl..."
            curl -s https://packages.stripe.dev/api/security/keypair/stripe-cli-gpg/public | gpg --dearmor | sudo tee /usr/share/keyrings/stripe.gpg
            echo "deb [signed-by=/usr/share/keyrings/stripe.gpg] https://packages.stripe.dev/stripe-cli-debian-local stable main" | sudo tee -a /etc/apt/sources.list.d/stripe.list
            sudo apt update
            sudo apt install stripe
        fi
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux
        curl -s https://packages.stripe.dev/api/security/keypair/stripe-cli-gpg/public | gpg --dearmor | sudo tee /usr/share/keyrings/stripe.gpg
        echo "deb [signed-by=/usr/share/keyrings/stripe.gpg] https://packages.stripe.dev/stripe-cli-debian-local stable main" | sudo tee -a /etc/apt/sources.list.d/stripe.list
        sudo apt update
        sudo apt install stripe
    else
        print_status $RED "‚ùå" "Sistema operacional n√£o suportado para instala√ß√£o autom√°tica."
        print_status $YELLOW "üí°" "Instale manualmente: https://stripe.com/docs/stripe-cli"
        return 1
    fi

    if check_stripe_cli; then
        print_status $GREEN "‚úÖ" "Stripe CLI instalado com sucesso!"
        return 0
    else
        print_status $RED "‚ùå" "Falha na instala√ß√£o do Stripe CLI."
        return 1
    fi
}

# Fun√ß√£o para configurar Stripe CLI
setup_stripe_cli() {
    print_status $BLUE "üîë" "Configurando Stripe CLI..."

    if ! check_stripe_cli; then
        print_status $YELLOW "‚ö†Ô∏è" "Stripe CLI n√£o encontrado. Instalando..."
        if ! install_stripe_cli; then
            return 1
        fi
    fi

    # Verificar se j√° est√° logado
    if stripe config --list | grep -q "api_key"; then
        print_status $GREEN "‚úÖ" "Stripe CLI j√° configurado!"
        return 0
    fi

    print_status $YELLOW "üîê" "Voc√™ precisa fazer login no Stripe CLI."
    print_status $CYAN "üí°" "1. Acesse: https://dashboard.stripe.com/apikeys"
    print_status $CYAN "üí°" "2. Copie sua chave secreta (sk_test_...)"
    print_status $CYAN "üí°" "3. Execute: stripe login"
    echo ""

    read -p "Pressione Enter quando estiver pronto para continuar..."

    # Tentar fazer login
    if stripe login; then
        print_status $GREEN "‚úÖ" "Login no Stripe CLI realizado com sucesso!"
        return 0
    else
        print_status $RED "‚ùå" "Falha no login do Stripe CLI."
        return 1
    fi
}

# Fun√ß√£o para configurar webhook automaticamente
setup_stripe_webhook() {
    print_status $BLUE "üîó" "Configurando webhook do Stripe..."

    if ! check_stripe_cli; then
        print_status $RED "‚ùå" "Stripe CLI n√£o encontrado. Execute 'setup' primeiro."
        return 1
    fi

    # Verificar se j√° existe webhook
    local webhook_url="http://localhost:8000/api/assinaturas/webhook/"
    local existing_webhooks=$(stripe webhook_endpoints list --limit 10 2>/dev/null | grep -c "$webhook_url" || echo "0")

    if [ "$existing_webhooks" -gt 0 ]; then
        print_status $GREEN "‚úÖ" "Webhook j√° configurado!"
        return 0
    fi

    print_status $BLUE "üîß" "Criando webhook endpoint..."

    # Criar webhook
    local webhook_output=$(stripe webhook_endpoints create \
        --url "$webhook_url" \
        --enabled-events checkout.session.completed \
        --enabled-events customer.subscription.created \
        --enabled-events customer.subscription.updated \
        --enabled-events customer.subscription.deleted \
        --enabled-events invoice.payment_succeeded \
        --enabled-events invoice.payment_failed \
        --description "IncludED Development Webhook" 2>/dev/null)

    if [ $? -eq 0 ]; then
        # Extrair webhook secret
        local webhook_secret=$(echo "$webhook_output" | grep -o 'whsec_[a-zA-Z0-9_]*' | head -1)

        if [ -n "$webhook_secret" ]; then
            print_status $GREEN "‚úÖ" "Webhook criado com sucesso!"
            print_status $CYAN "üîë" "Webhook Secret: $webhook_secret"

            # Atualizar .env se existir
            if [ -f ".env" ]; then
                if grep -q "STRIPE_WEBHOOK_SECRET" .env; then
                    sed -i.bak "s/STRIPE_WEBHOOK_SECRET=.*/STRIPE_WEBHOOK_SECRET=$webhook_secret/" .env
                else
                    echo "STRIPE_WEBHOOK_SECRET=$webhook_secret" >> .env
                fi
                print_status $GREEN "‚úÖ" "Webhook secret adicionado ao .env!"
            else
                print_status $YELLOW "‚ö†Ô∏è" "Arquivo .env n√£o encontrado. Adicione manualmente:"
                print_status $CYAN "üí°" "STRIPE_WEBHOOK_SECRET=$webhook_secret"
            fi

            return 0
        else
            print_status $RED "‚ùå" "Falha ao extrair webhook secret."
            return 1
        fi
    else
        print_status $RED "‚ùå" "Falha ao criar webhook."
        return 1
    fi
}

# Fun√ß√£o para setup completo
setup_complete() {
    show_banner
    print_status $PURPLE "üöÄ" "SETUP COMPLETO DA FERRAMENTA"
    print_status $CYAN "üìã" "Configurando ambiente de desenvolvimento completo..."
    echo ""

    # 1. Verificar Docker
    print_status $BLUE "1Ô∏è‚É£" "Verificando Docker..."
    if ! check_docker; then
        print_status $RED "‚ùå" "Docker n√£o est√° rodando. Inicie o Docker e tente novamente."
        exit 1
    fi
    print_status $GREEN "‚úÖ" "Docker OK!"
    echo ""

    # 2. Instalar depend√™ncias do frontend
    print_status $BLUE "2Ô∏è‚É£" "Instalando depend√™ncias do frontend..."
    if [ -f "included-frontend/package.json" ]; then
        cd included-frontend
        if command -v pnpm &> /dev/null; then
            pnpm install
        else
            print_status $YELLOW "‚ö†Ô∏è" "pnpm n√£o encontrado. Instalando..."
            npm install -g pnpm
            pnpm install
        fi
        cd ..
        print_status $GREEN "‚úÖ" "Depend√™ncias do frontend instaladas!"
    else
        print_status $YELLOW "‚ö†Ô∏è" "package.json n√£o encontrado no frontend."
    fi
    echo ""

    # 3. Configurar Stripe CLI
    print_status $BLUE "3Ô∏è‚É£" "Configurando Stripe CLI..."
    if setup_stripe_cli; then
        print_status $GREEN "‚úÖ" "Stripe CLI configurado!"
    else
        print_status $YELLOW "‚ö†Ô∏è" "Stripe CLI n√£o configurado. Configure manualmente depois."
    fi
    echo ""

    # 4. Configurar webhook
    print_status $BLUE "4Ô∏è‚É£" "Configurando webhook do Stripe..."
    if setup_stripe_webhook; then
        print_status $GREEN "‚úÖ" "Webhook configurado!"
    else
        print_status $YELLOW "‚ö†Ô∏è" "Webhook n√£o configurado. Configure manualmente depois."
    fi
    echo ""

    # 5. Configurar produtos Stripe
    print_status $BLUE "5Ô∏è‚É£" "Configurando produtos Stripe..."
    if [ -f "included-backend/manage.py" ]; then
        cd included-backend
        if [ -f ".env" ] || [ -f "../.env" ]; then
            python manage.py setup_stripe_products
            print_status $GREEN "‚úÖ" "Produtos Stripe configurados!"
        else
            print_status $YELLOW "‚ö†Ô∏è" "Arquivo .env n√£o encontrado. Configure as vari√°veis do Stripe primeiro."
        fi
        cd ..
    else
        print_status $YELLOW "‚ö†Ô∏è" "manage.py n√£o encontrado no backend."
    fi
    echo ""

    # 6. Iniciar ambiente
    print_status $BLUE "6Ô∏è‚É£" "Iniciando ambiente de desenvolvimento..."
    print_status $CYAN "üí°" "Iniciando containers Docker..."
    docker-compose up --build -d

    # Aguardar containers iniciarem
    sleep 10

    print_status $GREEN "‚úÖ" "Setup completo finalizado!"
    echo ""
    print_status $PURPLE "üéâ" "AMBIENTE PRONTO PARA DESENVOLVIMENTO!"
    echo ""
    print_status $CYAN "üìã" "Pr√≥ximos passos:"
    print_status $WHITE "   ‚Ä¢ Frontend: http://localhost:5173"
    print_status $WHITE "   ‚Ä¢ Backend: http://localhost:8000"
    print_status $WHITE "   ‚Ä¢ Admin: http://localhost:8000/admin"
    echo ""
    print_status $CYAN "üîß" "Comandos √∫teis:"
    print_status $WHITE "   ‚Ä¢ Ver logs: $0 logs"
    print_status $WHITE "   ‚Ä¢ Parar: $0 stop"
    print_status $WHITE "   ‚Ä¢ Status: $0 status"
    echo ""
}

# Fun√ß√£o para detectar novas depend√™ncias
detect_new_dependencies() {
    local frontend_dir="./included-frontend"

    if [ ! -f "$frontend_dir/package.json" ]; then
        print_status $RED "‚ùå" "Diret√≥rio frontend n√£o encontrado!"
        return 1
    fi

    # Verificar se h√° mudan√ßas no package.json
    if [ -f "$frontend_dir/.package_hash" ]; then
        local current_hash=$(md5sum "$frontend_dir/package.json" | awk '{print $1}')
        local stored_hash=$(cat "$frontend_dir/.package_hash")

        if [ "$current_hash" != "$stored_hash" ]; then
            print_status $YELLOW "üì¶" "Detectadas novas depend√™ncias!"

            # Verificar se o container est√° rodando
            if docker-compose ps frontend | grep -q "Up"; then
                print_status $BLUE "üîÑ" "Container est√° rodando, instalando depend√™ncias automaticamente..."

                # Instalar no container em execu√ß√£o (sem parar)
                docker-compose exec frontend pnpm install

                print_status $GREEN "‚úÖ" "Depend√™ncias instaladas no container em execu√ß√£o!"
            else
                print_status $BLUE "üîÑ" "Container parado, rebuildando..."
                docker-compose build frontend
            fi

            # Atualizar hash
            echo "$current_hash" > "$frontend_dir/.package_hash"
            return 0
        fi
    else
        # Primeira execu√ß√£o, criar hash
        md5sum "$frontend_dir/package.json" | awk '{print $1}' > "$frontend_dir/.package_hash"
    fi

    return 1
}

# Fun√ß√£o para iniciar ambiente
start_environment() {
    show_banner
    print_status $GREEN "üöÄ" "Iniciando ambiente de desenvolvimento..."

    # Verificar Docker
    check_docker

    # Detectar novas depend√™ncias
    if detect_new_dependencies; then
        print_status $GREEN "‚úÖ" "Depend√™ncias atualizadas automaticamente!"
    fi

    # Iniciar ambiente
    print_status $BLUE "üéØ" "Iniciando containers..."
    docker-compose up --build
}

# Fun√ß√£o para monitorar mudan√ßas em tempo real
watch_dependencies() {
    show_banner
    print_status $CYAN "üëÄ" "Monitorando mudan√ßas nas depend√™ncias..."
    print_status $YELLOW "‚ö†Ô∏è" "Pressione Ctrl+C para sair"
    echo ""

    local frontend_dir="./included-frontend"
    local last_hash=""

    # Obter hash inicial
    if [ -f "$frontend_dir/package.json" ]; then
        last_hash=$(md5sum "$frontend_dir/package.json" | awk '{print $1}')
    fi

    while true; do
        if [ -f "$frontend_dir/package.json" ]; then
            local current_hash=$(md5sum "$frontend_dir/package.json" | awk '{print $1}')

            if [ "$current_hash" != "$last_hash" ]; then
                echo ""
                print_status $YELLOW "üì¶" "Mudan√ßa detectada no package.json!"

                # Verificar se o container est√° rodando
                if docker-compose ps frontend | grep -q "Up"; then
                    print_status $BLUE "üîÑ" "Instalando depend√™ncias no container..."
                    docker-compose exec frontend pnpm install
                    print_status $GREEN "‚úÖ" "Depend√™ncias atualizadas!"
                else
                    print_status $BLUE "üîÑ" "Container parado, iniciando..."
                    docker-compose up -d frontend
                fi

                last_hash=$current_hash
                echo "$current_hash" > "$frontend_dir/.package_hash"
            fi
        fi

        sleep 2
    done
}

# Fun√ß√£o para instalar nova depend√™ncia
install_dependency() {
    if [ -z "$1" ]; then
        print_status $YELLOW "‚ö†Ô∏è" "Nenhuma depend√™ncia especificada."
        echo -e "${BLUE}Uso: $0 install {pacote}${NC}"
        echo -e "${BLUE}Exemplo: $0 install @radix-ui/react-checkbox${NC}"
        exit 1
    fi

    local package=$1

    show_banner
    print_status $BLUE "üì¶" "Instalando $package..."

    # Instalar localmente
    cd included-frontend
    pnpm add "$package"
    cd ..

    # Atualizar hash
    md5sum "included-frontend/package.json" | awk '{print $1}' > "included-frontend/.package_hash"

    print_status $GREEN "‚úÖ" "Depend√™ncia $package instalada localmente!"

    # Verificar se o container est√° rodando e instalar automaticamente
    if docker-compose ps frontend | grep -q "Up"; then
        print_status $BLUE "üîÑ" "Instalando no container em execu√ß√£o..."
        docker-compose exec frontend pnpm install
        print_status $GREEN "‚úÖ" "Depend√™ncia instalada no container!"
    else
        print_status $YELLOW "üí°" "Container n√£o est√° rodando. Execute '$0 start' para iniciar."
    fi
}

# Fun√ß√£o para mostrar ajuda
show_help() {
    show_banner
    echo -e "${WHITE}Uso: $0 {comando} [op√ß√µes]${NC}"
    echo ""
    echo -e "${YELLOW}Comandos dispon√≠veis:${NC}"
    echo ""
    echo -e "  ${GREEN}setup${NC}     - üöÄ SETUP COMPLETO (instala tudo e configura Stripe)"
    echo -e "  ${GREEN}start${NC}     - üöÄ Inicia o ambiente completo (detecta depend√™ncias automaticamente)"
    echo -e "  ${GREEN}install${NC}   - üì¶ Instala uma nova depend√™ncia (ex: $0 install @radix-ui/react-checkbox)"
    echo -e "  ${GREEN}watch${NC}     - üëÄ Monitora mudan√ßas nas depend√™ncias em tempo real"
    echo -e "  ${GREEN}stop${NC}      - üõë Para o ambiente"
    echo -e "  ${GREEN}restart${NC}   - üîÑ Reinicia o ambiente"
    echo -e "  ${GREEN}logs${NC}      - üìã Mostra logs em tempo real"
    echo -e "  ${GREEN}clean${NC}     - üßπ Limpa containers e volumes"
    echo -e "  ${GREEN}status${NC}    - üìä Mostra status dos containers"
    echo ""
    echo -e "${PURPLE}Comandos Stripe:${NC}"
    echo -e "  ${GREEN}stripe-setup${NC}  - üîß Instala e configura Stripe CLI"
    echo -e "  ${GREEN}webhook-setup${NC} - üîó Configura webhook do Stripe"
    echo ""
    echo -e "${YELLOW}Exemplos:${NC}"
    echo -e "  $0 setup                    # Setup completo (recomendado para primeira vez)"
    echo -e "  $0 start                    # Iniciar ambiente"
    echo -e "  $0 install @radix-ui/react-checkbox"
    echo -e "  $0 stripe-setup             # Configurar apenas Stripe CLI"
    echo -e "  $0 webhook-setup            # Configurar apenas webhook"
    echo ""
    echo -e "${CYAN}üí° Dica: Use 'setup' para configura√ß√£o completa na primeira vez!${NC}"
    echo -e "${CYAN}üí° Dica: Use 'watch' para monitorar mudan√ßas automaticamente!${NC}"
    echo -e "${CYAN}üí° Dica: O ambiente detecta automaticamente novas depend√™ncias!${NC}"
}

# Configura√ß√£o de erro
set -e

# Verificar se docker-compose.yml existe
if [ ! -f "docker-compose.yml" ]; then
    print_status $RED "‚ùå" "Arquivo docker-compose.yml n√£o encontrado!"
    exit 1
fi

case "$1" in
    "setup")
        setup_complete
        ;;
    "start")
        start_environment
        ;;
    "install")
        install_dependency "$2"
        ;;
    "stripe-setup")
        show_banner
        setup_stripe_cli
        ;;
    "webhook-setup")
        show_banner
        setup_stripe_webhook
        ;;
    "stop")
        show_banner
        print_status $YELLOW "üõë" "Parando ambiente..."
        docker-compose down
        print_status $GREEN "‚úÖ" "Ambiente parado!"
        ;;
    "restart")
        show_banner
        print_status $BLUE "üîÑ" "Reiniciando ambiente..."
        docker-compose down
        sleep 2
        start_environment
        ;;
    "logs")
        show_banner
        print_status $CYAN "üìã" "Mostrando logs..."
        docker-compose logs -f
        ;;
    "clean")
        show_banner
        print_status $YELLOW "üßπ" "Limpando ambiente..."
        docker-compose down -v
        docker system prune -f
        print_status $GREEN "‚úÖ" "Limpeza conclu√≠da!"
        ;;
    "status")
        show_banner
        print_status $CYAN "üìä" "Status dos containers:"
        docker-compose ps
        ;;
    "watch")
        watch_dependencies
        ;;
    "help"|"-h"|"--help"|"")
        show_help
        ;;
    *)
        print_status $RED "‚ùå" "Comando inv√°lido: $1"
        echo ""
        show_help
        exit 1
        ;;
esac
